import React, { Component } from "react";
import { Field, reduxForm } from "redux-form";

class StreamCreate extends Component {
  // the form input prop always receives props object
  //generated BY redux form, for our use
  renderInputField = formProps => {
    // console.log(formProps)
    // pass the formProps.input object as an object of props to input.
    //uses the same k/v pairing
    return (
      <div className="field">
        <label>
          {formProps.label}
          <input {...formProps.input} />
        </label>
        <div>
          <em> {formProps.meta.error} </em>{" "}
        </div>
      </div>
    );
  };

  //redux form's handleSubmit prop  invokes our form submit handler,
  //with the field name/value obj as argument
  onFormSubmit = formData => {
    console.log("form submitted with the following fields: ", formData);
  };

  render() {
    // console.log(this.props); // all the many things that redux forms adds to StreamCreate component
    return (
      <form
        className="ui form"
        //pass a prop of onSubmit, which refers to redux form's handleSubmit prop -> it calls prevent default
        onSubmit={this.props.handleSubmit(this.onFormSubmit)}
      >
        <Field
          name="title"
          //form field component prop -> pass a rendering function OR imported functional components
          component={this.renderInputField}
          label="TITLE"
        />
        <Field
          name="description"
          component={this.renderInputField}
          label="DESCRIPTION"
        />
        <button type="submit">SUBMIT</button>
      </form>
    );
  }
}

//validate form -> always declared OUTSIDE the component class implementation
//redux forms always passes it the current form data as an object
//it must return empty object (no errors) OR object with incorrect field's name and an error message
const validateForm = formData => {
  console.log(formData);
  const errors = {};

  //error object's keys must match the name of the field
  if (!formData.title) errors.title = "You must enter a title";
  if (!formData.description)
    errors.description = "You must enter a description";

  return errors;
};

export default reduxForm({
  form: "streamCreate", //form name- typically give it the file name
  validate: validateForm // key must always be "validate". This now adds the meta prop to form input element
})(StreamCreate);

import React, { Component } from "react";
import { Field, reduxForm } from "redux-form";

class StreamCreate extends Component {
  //form field component prop -> function OR imported functional components
  //always receives props object generated BY redux form, for our use
  renderInputField = formProps => {
    // console.log(formProps)
    // pass the formProps.input object as an object of props to input.
    //uses the same k/v pairing
    return (
      <div className="field">
        <label>
          {formProps.label}
          <input {...formProps.input} />
        </label>
      </div>
    );
  };

  //redux form's handleSubmit prop  invokes our form submit handler,
  //with the field name/value obj as argument
  onFormSubmit = formValues => {
    console.log(formValues);
  };

  render() {
    // console.log(this.props); // all the many things that redux forms adds to this component
    return (
      <form
        className="ui form"
        //pass a prop of onSubmit, which refers to redux form's handleSubmit prop -> it calls prevent default
        onSubmit={this.props.handleSubmit(this.onFormSubmit)}
      >
        <Field
          name="title"
          component={this.renderInputField}
          label="Give it a title"
        />
        <Field
          name="description"
          component={this.renderInputField}
          label="...and a description"
        />
        <button type="submit">SUBMIT</button>
      </form>
    );
  }
}

export default reduxForm({
  form: "streamCreate" //form name- typically give it the file name
})(StreamCreate);
